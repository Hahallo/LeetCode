You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
给你两个非空的链表，表示两个非负的整数。数字以反转的形式存在链表中并且每个节点只有一个数字，将两个数字相加并以链表形式返回。
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

解题思路:两个链表长度可能不同，所以首先相加至一个链表的尾部。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {        
		ListNode *l3 = new ListNode(0);
		ListNode *l4 = l3;
		int a = 0;
		while (l1 != NULL &&l2 != NULL)
		{

			int c = l1->val + l2->val + a;
			if (c >= 10)
			{
				c %= 10;
				a = 1;
			}
			else
			{
				a = 0;
			}
			l3->next = new ListNode(c);
			l3 = l3->next;
			l2 = l2->next;
			l1 = l1->next;
		}
        while(l1 != NULL)
        {
            int c=l1->val+a;
            if (c >= 10)
			{
				c %= 10;
				a = 1;
			}
            else
			{
				a = 0;
			}
            l3->next = new ListNode(c);
            l3 = l3->next;
			l1 = l1->next;
            
        }
        while(l2 != NULL)
        {
            int c=l2->val+a;
            if (c >= 10)
			{
				c %= 10;
				a = 1;
			}
            else
			{
				a = 0;
			}
            l3->next = new ListNode(c);
            l3 = l3->next;
			l2 = l2->next;
            
        }
		if (a == 1)
		{
			l3->next= new ListNode(1);
		}
		return l4->next;
    }
};
